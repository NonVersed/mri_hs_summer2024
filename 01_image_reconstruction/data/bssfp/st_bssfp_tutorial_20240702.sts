++++++ HEADER ++++++
STVERSION=4.6.0
++++++ END HEADER ++++++
++++++ NOTES ++++++


++++++ END NOTES ++++++
++++++ GLOBAL ++++++
FOV	(256,256,4)	mm
slice_thickness	4	mm
readout_N	256	
prep_PE1	1:1:200	
PE1	-128:1:127	
PE2	0:1:0	
TE	2700	microsec
TR	5400	microsec
dwell_time	4	microsec
flip_angle	24	degrees
slice_gradient_amplitude	(0,0,30)	uT/mm
spoiler_moment	(0,0,0)	uT/mm-us
maxamp	35	
ramprate	0.1	
ramp_time_1_ss	300	
ramp_time_2_ss	300	
ramp_time_1_ro	230	
ramp_time_2_ro	230	
FOV	->	Root->FOV
slice_thickness	->	Root->MainLoop->Block->Excite->slice_thickness
slice_thickness	->	Root->PrepLoop->Block->Excite->slice_thickness
readout_N	->	Root->MainLoop->Block->Acquire->Readout->N
readout_N	->	Root->PrepLoop->Block->Acquire->Readout->N
prep_PE1	->	Root->PrepLoop->PE1
PE1	->	Root->MainLoop->PE1
PE2	->	Root->MainLoop->PE2
TE	->	Root->MainLoop->Block->TE
TE	->	Root->PrepLoop->Block->TE
TR	->	Root->MainLoop->Block->TR
TR	->	Root->PrepLoop->Block->TR
dwell_time	->	Root->MainLoop->Block->Acquire->Readout->dwell_time
dwell_time	->	Root->PrepLoop->Block->Acquire->Readout->dwell_time
flip_angle	->	Root->MainLoop->Block->Excite->RF->flip_angle
flip_angle	->	Root->PrepLoop->flip_angle
slice_gradient_amplitude	->	Root->MainLoop->Block->Excite->gradient_amplitude
slice_gradient_amplitude	->	Root->PrepLoop->Block->Excite->gradient_amplitude
spoiler_moment	->	Root->PrepLoop->Block->Rewind->moment
spoiler_moment	->	Root->MainLoop->Block->Rewind->moment
maxamp	->	Root->maxamp
ramprate	->	Root->ramprate
ramp_time_1_ss	->	Root->PrepLoop->Block->Excite->SliceGradient->ramp_time_1
ramp_time_1_ss	->	Root->MainLoop->Block->Excite->SliceGradient->ramp_time_1
ramp_time_2_ss	->	Root->PrepLoop->Block->Excite->SliceGradient->ramp_time_2
ramp_time_2_ss	->	Root->MainLoop->Block->Excite->SliceGradient->ramp_time_2
ramp_time_1_ro	->	Root->PrepLoop->Block->Acquire->ReadoutGradient->ramp_time_1
ramp_time_1_ro	->	Root->MainLoop->Block->Acquire->ReadoutGradient->ramp_time_1
ramp_time_2_ro	->	Root->PrepLoop->Block->Acquire->ReadoutGradient->ramp_time_2
ramp_time_2_ro	->	Root->MainLoop->Block->Acquire->ReadoutGradient->ramp_time_2
++++++ END GLOBAL ++++++
++++++ RECONSTRUCTION ++++++
function reconstruction(num_channels)
if (nargin<1) num_channels=1; end;

if (num_channels==1)
	X=readmda('ADC1.mda');
	X=fftshift(fftn(fftshift(X)));
	writemda(X,'recon.mda');
end;

++++++ END NOTES ++++++
++++++ LINK GROUPS ++++++


++++++ END LINK GROUPS ++++++


++++++ NODES ++++++

PARAMETER	STVector3	FOV	(256,256,4)	mm	active	FOV
PARAMETER	STReal	maxamp	35	uT/mm	active	maxamp
PARAMETER	STReal	ramprate	0.1	[uT/mm]/us	active	ramprate
PARAMETER	STReal	gamma	42.5764	Hz/uT	active	
PARAMETER	STVector3	FOV_shift	(0,0,0)	mm	active	
PARAMETER	STVector3	phase_shift	180	degrees	passive	
PARAMETER	STVector3	FOV_shift_offset	(0,0,0)	mm; used internally	active	
CHILD	SPGRLoop_2	PrepLoop
    PARAMETER	STIterator	PE1	1:1:200		active	prep_PE1
    PARAMETER	STIterator	PE2	0:1:0		active	
    PARAMETER	STVector3	readout_dir	(1,0,0)		active	
    PARAMETER	STVector3	PE1_dir	(0,0,0)		active	
    PARAMETER	STVector3	PE2_dir	(0,0,1)		active	
    PARAMETER	STReal	flip_angle	24	deg	active	flip_angle
    CHILD	STGradientEchoBlock	Block
        PARAMETER	STReal	TE	2700	microsec	active	TE
        PARAMETER	STReal	TR	5400	microsec	active	TR
        PARAMETER	STVector3	kspace_dir	(1,0,0)		passive	
        PARAMETER	STVector3	kspace_echo	(0,0,0)		passive	
        PARAMETER	STReal	excite_time	10	microsec	active	
        CHILD	STExcite	Excite
            PARAMETER	STVector3	gradient_amplitude	(0,0,30)	uT/mm	active	slice_gradient_amplitude
            PARAMETER	STReal	slice_thickness	4	mm	active	slice_thickness
            PARAMETER	STReal	bandwidth	5109.17	Hz	passive	
            PARAMETER	STInteger	prephase	0	0 or 1	active	
            CHILD	STGradientMom	Prephase
                PARAMETER	STVector3	ramp_times_1	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	start_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(0,0,0)	uT/mm	passive	
                PARAMETER	STInteger	alignment	0	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            CHILD	STGradientAmp	SliceGradient
                PARAMETER	STReal	ramp_time_1	300	microsec	active	ramp_time_1_ss
                PARAMETER	STReal	plateau_time	1180	microsec	passive	
                PARAMETER	STReal	ramp_time_2	300	microsec	active	ramp_time_2_ss
                PARAMETER	STVector3	amplitude	(0,0,30)	uT/mm	passive	
                END
            CHILD	STSincRF	RF
                PARAMETER	STReal	num_lobes_left	2		active	
                PARAMETER	STReal	num_lobes_right	2		active	
                PARAMETER	STReal	flip_angle	24	degrees	passive	
                PARAMETER	STReal	pulse_duration	1174.36	microsec	passive	
                PARAMETER	STReal	reference_fraction	0.5		passive	
                PARAMETER	STReal	bandwidth	5109.17	Hz	passive	
                PARAMETER	STReal	time_step	1	microsec	active	
                PARAMETER	STReal	phase	0	degrees	active	
                PARAMETER	STReal	frequency	0	Hz	active	
                PARAMETER	STInteger	pulse_type	1	1=Excite; 2=Refocus	active	
                PARAMETER	STVector3	gradient_amplitude	(0,0,30)	uT/mm; for internal use	passive	
                PARAMETER	STReal	slice_thickness	4	mm; for internal use	passive	
                END
            END
        CHILD	STAcquire	Acquire
            PARAMETER	STVector3	echo_moment	(0,0,0)	[uT/mm]-us	passive	
            PARAMETER	STVector3	moment_per_point	(91.7468,0,0)	[uT/mm]-us	passive	
            CHILD	STGradientMom	Encode
                PARAMETER	STVector3	ramp_times_1	(350,0,350)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(70,0,290)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(350,0,350)	microsec	passive	
                PARAMETER	STVector3	start_times	(220,990,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(-34.6781,0,-34.6875)	uT/mm	passive	
                PARAMETER	STInteger	alignment	1	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            CHILD	STGradientAmp	ReadoutGradient
                PARAMETER	STReal	ramp_time_1	230	microsec	active	ramp_time_1_ro
                PARAMETER	STReal	plateau_time	1030	microsec	passive	
                PARAMETER	STReal	ramp_time_2	230	microsec	active	ramp_time_2_ro
                PARAMETER	STVector3	amplitude	(22.9367,0,0)	uT/mm	passive	
                END
            CHILD	STReadout	Readout
                PARAMETER	STInteger	enabled	0		active	
                PARAMETER	STReal	dwell_time	4	microsec	active	dwell_time
                PARAMETER	STInteger	N	256		active	readout_N
                PARAMETER	STReal	reference_fraction	0.5		active	
                PARAMETER	STReal	actual_reference_fraction	0.507813		passive	
                PARAMETER	STReal	reference_sample	130.5		passive	
                PARAMETER	STReal	phase	0	degrees	active	
                PARAMETER	STReal	frequency	0	Hz	active	
                PARAMETER	STVector3	gradient_amplitude	(22.9367,0,0)	uT/mm; for internal use	passive	
                PARAMETER	STInteger	round_up_reference_time	1	0 or 1	active	
                END
            END
        CHILD	STEncode	Rewind
            PARAMETER	STVector3	moment	(0,0,0)	[uT/mm]-us	active	spoiler_moment
            PARAMETER	STInteger	do_rewind	1	0 or 1	active	
            CHILD	STGradientMom	Gradient
                PARAMETER	STVector3	ramp_times_1	(350,0,0)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(60,0,0)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(350,0,0)	microsec	passive	
                PARAMETER	STVector3	start_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(-34.9645,0,0)	uT/mm	passive	
                PARAMETER	STInteger	alignment	0	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            END
        END
    END
CHILD	SPGRLoop_3	MainLoop
    PARAMETER	STIterator	PE1	-128:1:127		active	PE1
    PARAMETER	STIterator	PE2	0:1:0		active	PE2
    PARAMETER	STVector3	readout_dir	(1,0,0)		active	
    PARAMETER	STVector3	PE1_dir	(0,1,0)		active	
    PARAMETER	STVector3	PE2_dir	(0,0,1)		active	
    CHILD	STGradientEchoBlock	Block
        PARAMETER	STReal	TE	2700	microsec	active	TE
        PARAMETER	STReal	TR	5400	microsec	active	TR
        PARAMETER	STVector3	kspace_dir	(1,0,0)		passive	
        PARAMETER	STVector3	kspace_echo	(0,127,0)		passive	
        PARAMETER	STReal	excite_time	10	microsec	active	
        CHILD	STExcite	Excite
            PARAMETER	STVector3	gradient_amplitude	(0,0,30)	uT/mm	active	slice_gradient_amplitude
            PARAMETER	STReal	slice_thickness	4	mm	active	slice_thickness
            PARAMETER	STReal	bandwidth	5109.17	Hz	passive	
            PARAMETER	STInteger	prephase	0	0 or 1	active	
            CHILD	STGradientMom	Prephase
                PARAMETER	STVector3	ramp_times_1	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	start_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(0,0,0)	uT/mm	passive	
                PARAMETER	STInteger	alignment	0	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            CHILD	STGradientAmp	SliceGradient
                PARAMETER	STReal	ramp_time_1	300	microsec	active	ramp_time_1_ss
                PARAMETER	STReal	plateau_time	1180	microsec	passive	
                PARAMETER	STReal	ramp_time_2	300	microsec	active	ramp_time_2_ss
                PARAMETER	STVector3	amplitude	(0,0,30)	uT/mm	passive	
                END
            CHILD	STSincRF	RF
                PARAMETER	STReal	num_lobes_left	2		active	
                PARAMETER	STReal	num_lobes_right	2		active	
                PARAMETER	STReal	flip_angle	24	degrees	active	flip_angle
                PARAMETER	STReal	pulse_duration	1174.36	microsec	passive	
                PARAMETER	STReal	reference_fraction	0.5		passive	
                PARAMETER	STReal	bandwidth	5109.17	Hz	passive	
                PARAMETER	STReal	time_step	1	microsec	active	
                PARAMETER	STReal	phase	0	degrees	active	
                PARAMETER	STReal	frequency	0	Hz	active	
                PARAMETER	STInteger	pulse_type	1	1=Excite; 2=Refocus	active	
                PARAMETER	STVector3	gradient_amplitude	(0,0,30)	uT/mm; for internal use	passive	
                PARAMETER	STReal	slice_thickness	4	mm; for internal use	passive	
                END
            END
        CHILD	STAcquire	Acquire
            PARAMETER	STVector3	echo_moment	(0,11651.8,0)	[uT/mm]-us	passive	
            PARAMETER	STVector3	moment_per_point	(91.7468,0,0)	[uT/mm]-us	passive	
            CHILD	STGradientMom	Encode
                PARAMETER	STVector3	ramp_times_1	(350,350,350)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(70,0,290)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(350,350,350)	microsec	passive	
                PARAMETER	STVector3	start_times	(220,290,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(-34.6781,33.291,-34.6875)	uT/mm	passive	
                PARAMETER	STInteger	alignment	1	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            CHILD	STGradientAmp	ReadoutGradient
                PARAMETER	STReal	ramp_time_1	230	microsec	active	ramp_time_1_ro
                PARAMETER	STReal	plateau_time	1030	microsec	passive	
                PARAMETER	STReal	ramp_time_2	230	microsec	active	ramp_time_2_ro
                PARAMETER	STVector3	amplitude	(22.9367,0,0)	uT/mm	passive	
                END
            CHILD	STReadout	Readout
                PARAMETER	STInteger	enabled	1		active	
                PARAMETER	STReal	dwell_time	4	microsec	active	dwell_time
                PARAMETER	STInteger	N	256		active	readout_N
                PARAMETER	STReal	reference_fraction	0.5		active	
                PARAMETER	STReal	actual_reference_fraction	0.507813		passive	
                PARAMETER	STReal	reference_sample	130.5		passive	
                PARAMETER	STReal	phase	0	degrees	active	
                PARAMETER	STReal	frequency	0	Hz	active	
                PARAMETER	STVector3	gradient_amplitude	(22.9367,0,0)	uT/mm; for internal use	passive	
                PARAMETER	STInteger	round_up_reference_time	1	0 or 1	active	
                END
            END
        CHILD	STEncode	Rewind
            PARAMETER	STVector3	moment	(0,0,0)	[uT/mm]-us	active	spoiler_moment
            PARAMETER	STInteger	do_rewind	1	0 or 1	active	
            CHILD	STGradientMom	Gradient
                PARAMETER	STVector3	ramp_times_1	(350,350,0)	microsec	passive	
                PARAMETER	STVector3	plateau_times	(60,0,0)	microsec	passive	
                PARAMETER	STVector3	ramp_times_2	(350,350,0)	microsec	passive	
                PARAMETER	STVector3	start_times	(0,0,0)	microsec	passive	
                PARAMETER	STVector3	amplitude	(-34.9645,-33.291,0)	uT/mm	passive	
                PARAMETER	STInteger	alignment	0	0=left; 1=right; 2=center	active	
                PARAMETER	STInteger	always_min_dur	0	0 or 1	active	
                PARAMETER	STReal	maxamp	0	[uT/mm]	active	
                PARAMETER	STReal	ramprate	0	[uT/mm]/us	active	
                END
            END
        END
    END
END

++++++ END NODES ++++++

++++++ USERCLASS SPGRLoop ++++++

++++++ HEADER
class ST_EXPORT SPGRLoop : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator PE1;
	STIterator PE2;
	STVector3 readout_dir;
	STVector3 PE1_dir;
	STVector3 PE2_dir;
	STInteger RF_spoiling;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	SPGRLoop();
	bool prepare();
	
	bool loopRun();
};


++++++ SOURCE
SPGRLoop::SPGRLoop() {
	ST_CLASS(SPGRLoop,STLoop)
	/* ST_PARAMETERS */	
	ST_PARAMETER(STIterator,PE1,0:1:0,)
	ST_PARAMETER(STIterator,PE2,0:1:0,)
	ST_PARAMETER(STVector3,readout_dir,(1,0,0),)
	ST_PARAMETER(STVector3,PE1_dir,(0,1,0),)
	ST_PARAMETER(STVector3,PE2_dir,(0,0,1),)
	ST_PARAMETER(STInteger,RF_spoiling,0,0 or 1)
	/* ST_CHILDREN */
	ST_CHILD(STGradientEchoBlock,Block)
}
bool SPGRLoop::prepare() {
	Block->kspace_dir=readout_dir;
	return STLoop::prepare();
}


bool SPGRLoop::loopRun() {
    if (RF_spoiling) {
        sequence()->phase_shift=rand()%360;
    }
	Block->kspace_echo=PE1_dir*PE1+PE2_dir*PE2;
	return Block->run();
}

++++++ END

++++++ CLASS SPGRLoop_1 ++++++

++++++ HEADER
class ST_EXPORT SPGRLoop_1 : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator PE1;
	STIterator PE2;
	STVector3 readout_dir;
	STVector3 PE1_dir;
	STVector3 PE2_dir;
	STInteger RF_spoiling;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	SPGRLoop_1();
	bool prepare();
	
	bool loopRun();
};


++++++ SOURCE
SPGRLoop_1::SPGRLoop_1() {
	ST_CLASS(SPGRLoop_1,STLoop)
	/* ST_PARAMETERS */	
	ST_PARAMETER(STIterator,PE1,0:1:0,)
	ST_PARAMETER(STIterator,PE2,0:1:0,)
	ST_PARAMETER(STVector3,readout_dir,(1,0,0),)
	ST_PARAMETER(STVector3,PE1_dir,(0,1,0),)
	ST_PARAMETER(STVector3,PE2_dir,(0,0,1),)
	ST_PARAMETER(STInteger,RF_spoiling,0,0 or 1)
	/* ST_CHILDREN */
	ST_CHILD(STGradientEchoBlock,Block)
}
bool SPGRLoop_1::prepare() {
	Block->kspace_dir=readout_dir;
	return STLoop::prepare();
}


bool SPGRLoop_1::loopRun() {
    if (RF_spoiling) {
        sequence()->phase_shift=rand()%360;
    }
	Block->kspace_echo=PE1_dir*PE1+PE2_dir*PE2;
	return Block->run();
}

++++++ END

++++++ CLASS SPGRLoop_2 ++++++

++++++ HEADER
class ST_EXPORT SPGRLoop_2 : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator PE1;
	STIterator PE2;
	STVector3 readout_dir;
	STVector3 PE1_dir;
	STVector3 PE2_dir;
	STReal flip_angle;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	SPGRLoop_2();
	bool prepare();
	
	bool loopRun();
};


++++++ SOURCE
SPGRLoop_2::SPGRLoop_2() {
	ST_CLASS(SPGRLoop_2,STLoop)
	/* ST_PARAMETERS */	
	ST_PARAMETER(STIterator,PE1,0:1:0,)
	ST_PARAMETER(STIterator,PE2,0:1:0,)
	ST_PARAMETER(STVector3,readout_dir,(1,0,0),)
	ST_PARAMETER(STVector3,PE1_dir,(0,1,0),)
	ST_PARAMETER(STVector3,PE2_dir,(0,0,1),)
	ST_PARAMETER(STReal,flip_angle,12,deg)
	/* ST_CHILDREN */
	ST_CHILD(STGradientEchoBlock,Block)
}
bool SPGRLoop_2::prepare() {
	Block->kspace_dir=readout_dir;
	// set RF phase to 0
	 sequence()->phase_shift=0;
	return STLoop::prepare();
}


bool SPGRLoop_2::loopRun() {
	// linear catalyzation
	if (PE1 <= 10) {
		Block->Excite->RF->flip_angle = flip_angle * (PE1/10);
	}
	
	
	// alternating RF phase
	sequence()->phase_shift=int(sequence()->phase_shift+180)%360;


	Block->kspace_echo=0;
	return Block->run();
}

++++++ END

++++++ CLASS SPGRLoop_3 ++++++

++++++ HEADER
class ST_EXPORT SPGRLoop_3 : public STLoop
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STIterator PE1;
	STIterator PE2;
	STVector3 readout_dir;
	STVector3 PE1_dir;
	STVector3 PE2_dir;
	STGradientEchoBlock *Block;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	SPGRLoop_3();
	bool prepare();
	
	bool loopRun();
};


++++++ SOURCE
SPGRLoop_3::SPGRLoop_3() {
	ST_CLASS(SPGRLoop_3,STLoop)
	/* ST_PARAMETERS */	
	ST_PARAMETER(STIterator,PE1,0:1:0,)
	ST_PARAMETER(STIterator,PE2,0:1:0,)
	ST_PARAMETER(STVector3,readout_dir,(1,0,0),)
	ST_PARAMETER(STVector3,PE1_dir,(0,1,0),)
	ST_PARAMETER(STVector3,PE2_dir,(0,0,1),)
	/* ST_CHILDREN */
	ST_CHILD(STGradientEchoBlock,Block)
}
bool SPGRLoop_3::prepare() {
	Block->kspace_dir=readout_dir;
	return STLoop::prepare();
}


bool SPGRLoop_3::loopRun() {
	
	// alternating RF phase
	sequence()->phase_shift=int(sequence()->phase_shift+180)%360;

	Block->kspace_echo=PE1_dir*PE1+PE2_dir*PE2;
	return Block->run();
}

++++++ END

++++++ CLASS STRoot ++++++

++++++ HEADER
class STRoot : public STSequence
{
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	SPGRLoop_2 *PrepLoop;
	SPGRLoop_3 *MainLoop;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	STRoot();
};


++++++ SOURCE
STRoot::STRoot() {
	ST_CLASS(STRoot,STSequence)
	/* ST_PARAMETERS */
	/* ST_CHILDREN */
	ST_CHILD(SPGRLoop_2,PrepLoop);
	ST_CHILD(SPGRLoop_3,MainLoop);
}

++++++ END

++++++ USERCLASS SpinLockRF ++++++

++++++ HEADER
class SpinLockRF : public STNode {
public:
	/* BEGIN SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	STReal flip_angle_1;
	STReal flip_angle_2;
	STReal pulse_duration_1;
	STReal pulse_duration_2;
	STInteger alternating_phase;
	STInteger frequency_offset;
	STInteger num_sl_pulses;
	STReal inter_pulse_delay;
	STReal time_step;
	STReal phase;
	STReal frequency;
	/* END SEQUENCETREE -- this section generated by SequenceTree -- do not edit */
	
	//events
	STScannerRFPulse *RF_bread;
	STScannerRFPulse *RF_meat;
	/////////////////////////////////////////////////////
	SpinLockRF();
	virtual ~SpinLockRF();
	bool initialize();
	bool prepare();
	bool run();
	double duration();
	double referenceTime();
	Vector3 terminalMoment();
	Vector3 gradientStartTimes(); 
	Vector3 gradientEndTimes();
	double SAR();
private:
	void delete_events();
};


++++++ SOURCE
SpinLockRF::SpinLockRF() {
	ST_CLASS(SpinLockRF,STNode)
	RF_bread=0;
	RF_meat=0;
	/* ST_PARAMETERS */
	ST_PARAMETER(STReal, flip_angle_1, 90, degrees)
	ST_PARAMETER(STReal, flip_angle_2, 360, degrees)
	ST_PARAMETER(STReal, pulse_duration_1, 300, microsec)
	ST_PARAMETER(STReal, pulse_duration_2, 1000, microsec)
	ST_PARAMETER(STInteger, alternating_phase, 0, 0 or 1) 
	ST_PARAMETER(STInteger, frequency_offset, 0, Hz)
	ST_PARAMETER(STInteger, num_sl_pulses, 10,)
	ST_PARAMETER(STReal, inter_pulse_delay, 60, microsec)
	ST_PARAMETER(STReal, time_step, 10, microsec)
	ST_PARAMETER(STReal, phase, 0, degrees)
	ST_PARAMETER(STReal, frequency, 0, Hz)
	/* ST_CHILDREN */
}
SpinLockRF::~SpinLockRF() {
	delete_events();
}
void SpinLockRF::delete_events() {
	if (RF_bread) delete RF_bread; RF_bread=0;
	if (RF_meat) delete RF_meat; RF_meat=0;
}
bool SpinLockRF::initialize() {
	clearChildren();
	if (!scanner()) return false;
	delete_events();
	RF_bread=scanner()->allocateRFPulse(this);
	RF_meat=scanner()->allocateRFPulse(this);
	return true;
}
bool SpinLockRF::prepare() {
	if (!RF_bread) return false;
	if (!RF_meat) return false;
	if (time_step<=0) return false;
	if (pulse_duration_1<=time_step) return false;
	if (pulse_duration_2<=time_step) return false;
	if (!sequence()) return false;
		
		long N1=(long)(pulse_duration_1/time_step);
		long N2=(long)(pulse_duration_2/time_step);
		
		double *data_mag_1=(double *)malloc(sizeof(double)*N1);
		double *data_phase_1=(double *)malloc(sizeof(double)*N1);
		double *data_mag_2=(double *)malloc(sizeof(double)*N2);
		double *data_phase_2=(double *)malloc(sizeof(double)*N2);
		double sum_re_1=0,sum_re_2=0;
		double sum_im_1=0,sum_im_2=0;
		{for (long j=0; j<N1; j++) {
			double re=1,im=0;
			sum_re_1+=re;
			sum_im_1+=im;
			data_mag_1[j]=sqrt(re*re+im*im);
			data_phase_1[j]=atan2(im,re)/(2*3.1415926535)*360;
		}}
		{for (long j=0; j<N2; j++) {
			double re=1,im=0;
			sum_re_2+=re;
			sum_im_2+=im;
			data_mag_2[j]=sqrt(re*re+im*im);
			data_phase_2[j]=atan2(im,re)/(2*3.1415926535)*360;
		}}
		//uT * sec * Hz/uT * degrees = degrees  
		double factor1=sqrt(sum_re_1*sum_re_1+sum_im_1*sum_im_1)*time_step/1.0E6*sequence()->gamma*360/90;
		double factor2=sqrt(sum_re_2*sum_re_2+sum_im_2*sum_im_2)*time_step/1.0E6*sequence()->gamma*360/90;
		{for (long j=0; j<N1; j++) {
			data_mag_1[j]/=factor1;
		}}
		{for (long j=0; j<N2; j++) {
			data_mag_2[j]/=factor2;
		}}
		RF_bread->setPulse(N1,data_mag_1,data_phase_1,time_step,90,pulse_duration_1/2);
		RF_meat->setPulse(N2,data_mag_2,data_phase_2,time_step,90,pulse_duration_2/2);
		free(data_mag_1);
		free(data_phase_1);
		free(data_mag_2);
		free(data_phase_2);
	
	RF_bread->setFlipAngle(flip_angle_1);
	RF_meat->setFlipAngle(flip_angle_2);
	
	setModified(false);
	return true;
}
bool SpinLockRF::run() {
	if (!RF_bread) return false;
	if (!RF_meat) return false;
	if (!scanner()) return false;
	if (!sequence()) return false;

	double ph=phase;
	Vector3 totmom=initialTotalMoment();
	ph+=sequence()->phaseAdjustment();
	ph+=(totmom.x()*sequence()->getFOVShiftX()
		+totmom.y()*sequence()->getFOVShiftY()
		+totmom.z()*sequence()->getFOVShiftZ())*sequence()->gamma/1.0E6*360;
	RF_bread->setPhase(ph);
	RF_meat->setPhase(ph);
	
	RF_bread->setFrequency(frequency);
	RF_meat->setFrequency(frequency);
	

	//The excite pulse 
	double time_offset=0;
	RF_bread->setStartTime(startTime()+time_offset);
	if (RF_bread->pulseCount()) scanner()->addEvent(RF_bread);
	time_offset+=pulse_duration_1+inter_pulse_delay;

	//inner pulses
	for (int j=0; j<num_sl_pulses; j++) {
		if (alternating_phase) {
			if (j%2==0) {
				RF_meat->setPhase(ph+0);
				RF_meat->setFrequency(frequency_offset);
			}
			else {
				RF_meat->setPhase(ph+180);
				RF_meat->setFrequency(frequency_offset);
			}
		}
		RF_meat->setStartTime(startTime()+time_offset);
		if (RF_meat->pulseCount()) scanner()->addEvent(RF_meat);
		time_offset+=pulse_duration_2+inter_pulse_delay;
	}

	//The store pulse
	RF_bread->setStartTime(startTime()+time_offset);
	if (RF_bread->pulseCount()) scanner()->addEvent(RF_bread);
	time_offset+=pulse_duration_1+inter_pulse_delay;
	
	return true;
}
double SpinLockRF::duration() {
	if ((!RF_meat)||(RF_bread)) return 0;
	return pulse_duration_1*2 + pulse_duration_2*num_sl_pulses + inter_pulse_delay*(num_sl_pulses+1);
}
double SpinLockRF::referenceTime() {
	return 0;
}
Vector3 SpinLockRF::terminalMoment() {
	return Vector3();
}

Vector3 SpinLockRF::gradientStartTimes() {
	return Vector3(0,0,0);
}
Vector3 SpinLockRF::gradientEndTimes() {
	double dur=duration();
	return Vector3(dur,dur,dur);
}

double SpinLockRF::SAR() {
	if ((!RF_bread)||(!RF_meat)) return 0;
	return RF_bread->SAR()*2 + RF_meat->SAR()*num_sl_pulses;
}

++++++ END
++++++ RESOURCES ++++++



++++++ END RESOURCES ++++++

